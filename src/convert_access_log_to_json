#!/usr/bin/env -S java --source 17

/*
 * Copyright 2025-2025 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

/**
 * Java program and shell script converting an Apache-like access log to a JSON array as string.
 * The result can be piped to the "jq" command.
 * <p>
 * See for example <a href="https://www.sumologic.com/blog/apache-access-log">Apache access log</a>
 * for the log format.
 * See <a href="https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch07s13.html">log entry regex</a>
 * for the regex.
 * See <a href="https://jdriven.com/blog/2020/04/Java-Joy-Using-Named-Capturing-Groups-In-Regular-Expressions">named capturing groups</a>
 * for information on named capturing groups in regexes supported by Java. Named capturing groups have
 * made regular expressions in Java much more friendly to use.
 *
 * @author Chris de Vreeze
 */
public final class AccessLogToJsonConverter implements Runnable {

    private static final Pattern LOG_ENTRY_PATTERN =
            Pattern.compile(
                    String.join("",
                            """
                                    ^(?<clientIpAddress>\\S+)\\s+""",
                            """
                                    (?<clientIdentity>\\S+)\\s+""",
                            """
                                    (?<userId>\\S+)\\s+""",
                            """
                                    \\[(?<dateTime>[^\\]]+)\\]\\s+""",
                            """
                                    "(?<httpMethod>[A-Z]+)\\s+(?<requestUrl>[^\\s"]+)?\\s+(?<httpVersion>HTTP/[0-9.]+)"\\s+""",
                            """
                                    (?<httpStatus>[0-9]{3})\\s+""",
                            """
                                    (?<size>[0-9]+|-)\\s+""",
                            """
                                    "(?<referrer>[^"]*)"\\s+""",
                            """
                                    "(?<userAgent>[^"]*)"\s"""
                    ).stripTrailing()
            );

    public enum HttpMethod {
        GET, POST, PUT, HEAD, DELETE, CONNECT, OPTIONS, TRACE, PATCH
    }

    public record Request(
            HttpMethod httpMethod,
            String url,
            String httpVersion
    ) {
    }

    public record LogEntry(
            String ipAddress,
            String clientIdentity, // typically a hyphen
            String userId,
            String requestDateTime,
            Request request,
            String httpStatusCode,
            long sizeOfResponse,
            String referrer,
            String userAgent
    ) {

        public static LogEntry parse(String s) {
            Matcher matcher = LOG_ENTRY_PATTERN.matcher(s);
            if (!matcher.matches()) {
                throw new IllegalStateException("Not a log entry"); // Improve message
            }
            return new LogEntry(
                    matcher.group("clientIpAddress"),
                    matcher.group("clientIdentity"),
                    matcher.group("userId"),
                    matcher.group("dateTime"),
                    new Request(
                            HttpMethod.valueOf(matcher.group("httpMethod")),
                            matcher.group("requestUrl"),
                            matcher.group("httpVersion")
                    ),
                    matcher.group("httpStatus"),
                    Long.parseLong(matcher.group("size")),
                    matcher.group("referrer"),
                    matcher.group("userAgent")
            );
        }
    }

    public static void main(String... args) {
        AccessLogToJsonConverter runnable = new AccessLogToJsonConverter(args);
        runnable.run();
    }

    private final List<String> args;

    public AccessLogToJsonConverter(String[] args) {
        this.args = Arrays.stream(args).toList();
    }

    @Override
    public void run() {
        // Memory-efficient processing, basically keeping only one line in memory at a time

        Objects.requireNonNull(args); // Dummy statement to please the compiler

        BufferedReader stdInReader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
        Stream<String> lineStream = stdInReader.lines();

        PrintWriter stdOutWriter = new PrintWriter(System.out, true, StandardCharsets.UTF_8);

        lineStream
                .map(this::convertLine)
                .forEach(stdOutWriter::println);
    }

    // TODO Lines for which parsing fails should go to stderr

    private String convertLine(String line) {
        LogEntry logEntry = LogEntry.parse(line);

        // TODO Convert to JSON
        return logEntry.toString();
    }
}
