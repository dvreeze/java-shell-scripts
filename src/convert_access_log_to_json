#!/usr/bin/env -S java --source 21

/*
 * Copyright 2025-2025 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Stream;

/**
 * Java program and shell script converting an Apache-like access log to a JSON array as string.
 * The result can be piped to the "jq" command.
 * <p>
 * See for example <a href="https://www.sumologic.com/blog/apache-access-log">Apache access log</a>
 * for the log format.
 * See <a href="https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch07s13.html">log entry regex</a>
 * for the regex.
 * See <a href="https://jdriven.com/blog/2020/04/Java-Joy-Using-Named-Capturing-Groups-In-Regular-Expressions">named capturing groups</a>
 * for information on named capturing groups in regexes supported by Java. Named capturing groups have
 * made regular expressions in Java much more friendly to use.
 *
 * @author Chris de Vreeze
 */
public final class AccessLogToJsonConverter implements Runnable {

    private static final Pattern LOG_ENTRY_PATTERN =
            Pattern.compile(
                    String.join("",
                            """
                                    ^(?<clientIpAddress>\\S+)\\s+""",
                            """
                                    (?<clientIdentity>\\S+)\\s+""",
                            """
                                    (?<userId>\\S+)\\s+""",
                            """
                                    \\[(?<dateTime>[^\\]]+)\\]\\s+""",
                            """
                                    "(?<httpMethod>[A-Z]+)\\s+(?<requestUrl>[^\\s"]+)?\\s+(?<httpVersion>HTTP/[0-9.]+)"\\s+""",
                            """
                                    (?<httpStatus>[0-9]{3})\\s+""",
                            """
                                    (?<size>[0-9]+|-)\\s+""",
                            """
                                    "(?<referrer>[^"]*)"\\s+""",
                            """
                                    "(?<userAgent>[^"]*)"\s""" // This trailing space is needed to please the compiler
                    ).stripTrailing()
            );

    public enum HttpMethod {
        GET, POST, PUT, HEAD, DELETE, CONNECT, OPTIONS, TRACE, PATCH
    }

    public record Request(
            HttpMethod httpMethod,
            String url,
            String httpVersion
    ) {

        public JsonSupport.JsonObject toJsonValue() {
            return new JsonSupport.JsonObject(
                    Map.of(
                            "httpMethod", new JsonSupport.JsonString(httpMethod().toString()),
                            "requestUrl", new JsonSupport.JsonString(url()),
                            "httpVersion", new JsonSupport.JsonString(httpVersion())
                    )
            );
        }
    }

    public record LogEntry(
            String ipAddress,
            String clientIdentity, // typically a hyphen
            String userId,
            String requestDateTime,
            Request request,
            int httpStatusCode,
            Long sizeOfResponse,
            String referrer,
            String userAgent
    ) {

        public JsonSupport.JsonObject toJsonValue() {
            return new JsonSupport.JsonObject(
                    Map.of(
                            "clientIpAddress", new JsonSupport.JsonString(ipAddress()),
                            "clientIdentity", new JsonSupport.JsonString(clientIdentity()),
                            "userId", new JsonSupport.JsonString(userId()),
                            "dateTime", new JsonSupport.JsonString(requestDateTime()),
                            "request", request().toJsonValue(),
                            "httpStatus", JsonSupport.JsonNumber.from(httpStatusCode()),
                            "size", Optional.ofNullable(sizeOfResponse())
                                    .map(Object::toString)
                                    .map(JsonSupport.JsonString::new)
                                    .map(v -> (JsonSupport.JsonValue) v)
                                    .orElse(JsonSupport.JsonNull.INSTANCE),
                            "referrer", new JsonSupport.JsonString(referrer()),
                            "userAgent", new JsonSupport.JsonString(userAgent())
                    )
            );
        }

        public static LogEntry parse(String s) {
            Matcher matcher = LOG_ENTRY_PATTERN.matcher(s);
            if (!matcher.matches()) {
                throw new IllegalStateException("Not a log entry: " + s);
            }
            return new LogEntry(
                    matcher.group("clientIpAddress"),
                    matcher.group("clientIdentity"),
                    matcher.group("userId"),
                    matcher.group("dateTime"),
                    new Request(
                            HttpMethod.valueOf(matcher.group("httpMethod")),
                            matcher.group("requestUrl"),
                            matcher.group("httpVersion")
                    ),
                    Integer.parseInt(matcher.group("httpStatus")),
                    parseLong(matcher.group("size")),
                    matcher.group("referrer"),
                    matcher.group("userAgent")
            );
        }
    }

    // Why can I not make this interface sealed?

    public interface LogEntryConversionResult {
    }

    public record LogEntryJsonResult(String jsonString) implements LogEntryConversionResult {
    }

    public record LogEntryErrorResult(String message) implements LogEntryConversionResult {
    }

    public static void main(String... args) {
        AccessLogToJsonConverter runnable = new AccessLogToJsonConverter(args);
        runnable.run();
    }

    private final List<String> args;

    public AccessLogToJsonConverter(String[] args) {
        this.args = Arrays.stream(args).toList();
    }

    @Override
    public void run() {
        // Memory-efficient processing, basically keeping only one line in memory at a time

        Objects.requireNonNull(args); // Dummy statement to please the compiler

        if (Runtime.version().feature() < 21) {
            throw new IllegalStateException("Java version >= 21 required");
        }

        // Given Java feature version >= 21, the default charset is UTF-8 for InputStreamReader etc.
        // See also https://www.baeldung.com/java-char-encoding.
        // Given that stdIn expects UTF-8 input, use "iconv" to convert input to UTF-8 before running this program

        BufferedReader stdInReader = new BufferedReader(new InputStreamReader(System.in));
        Stream<String> lineStream = stdInReader.lines();

        // Running on Linux, the newline is the single-char Unix newline character
        // So method println always outputs a Linux newline
        // Consider using "unix2dos" on the output of the program for files that should have a "Windows newline"

        PrintWriter stdOutWriter = new PrintWriter(System.out, true);
        PrintWriter stdErrWriter = new PrintWriter(System.err, true);

        stdOutWriter.print("["); // no newline at the end yet

        final AtomicBoolean isFirst = new AtomicBoolean(true); // not necessary, because processing is single-threaded

        lineStream
                .map(this::convertLine)
                .forEach(result -> writeLogEntryConversionResult(result, stdOutWriter, stdErrWriter, isFirst));

        stdOutWriter.println();
        stdOutWriter.println("]");
    }

    private LogEntryConversionResult convertLine(String line) {
        try {
            LogEntry logEntry = LogEntry.parse(line);

            return new LogEntryJsonResult(logEntry.toJsonValue().toString());
        } catch (RuntimeException e) {
            return new LogEntryErrorResult(e.getMessage());
        }
    }

    private void writeLogEntryConversionResult(
            LogEntryConversionResult result,
            PrintWriter stdOutWriter,
            PrintWriter stdErrWriter,
            AtomicBoolean isFirst) {
        if (result instanceof LogEntryJsonResult jsonResult) {
            writeLogEntryJson(jsonResult.jsonString(), stdOutWriter, isFirst);
        } else if (result instanceof LogEntryErrorResult errorResult) {
            stdErrWriter.println(errorResult.message());
        }
    }

    private void writeLogEntryJson(String logEntryJson, PrintWriter stdOutWriter, AtomicBoolean isFirst) {
        if (isFirst.getAndSet(false)) {
            stdOutWriter.println();
        } else {
            stdOutWriter.println(",");
        }
        stdOutWriter.print(logEntryJson); // no newline at the end yet
    }

    // See https://docs.ycrash.io/ycrash-features/ycrash-faq/escaping-special-characters.html

    private static String escapeDoubleQuotes(String s) {
        return s.replace("\"", "\\\"");
    }

    private static Long parseLong(String s) {
        if (s.equals("-")) {
            return null;
        } else {
            return Long.parseLong(s);
        }
    }

    // JSON support (copied from other source file)

    /**
     * JSON support, to be copied (as static member class) into Java shell scripts that need it.
     *
     * @author Chris de Vreeze
     */
    public static class JsonSupport {

        private JsonSupport() {
        }

        // Very heavily inspired by JSON-B

        public enum JsonValueType {
            OBJECT, ARRAY, NUMBER, BOOLEAN, STRING, NULL
        }

        // Intended to be immutable data structures

        public interface JsonValue {

            JsonSupport.JsonValueType getValueType();

            // TODO Consider taking control over malformed/unmappable character mapping (using CharsetEncoder)

            void print(PrintWriter pw, String indentString);
        }

        public interface JsonStructure extends JsonSupport.JsonValue {
        }

        public record JsonObject(
                Map<String, JsonSupport.JsonValue> fields) implements JsonSupport.JsonStructure {

            public JsonObject {
                fields = Map.copyOf(fields);
            }

            @Override
            public JsonSupport.JsonValueType getValueType() {
                return JsonSupport.JsonValueType.OBJECT;
            }

            @Override
            public void print(PrintWriter pw, String indentString) {
                pw.println("{");

                String newIndentString = indentString + "    ";

                List<Map.Entry<String, JsonSupport.JsonValue>> entries = List.copyOf(fields.entrySet());

                if (entries.isEmpty()) {
                    pw.println();
                } else {
                    for (Map.Entry<String, JsonSupport.JsonValue> entry : entries.subList(0, entries.size() - 1)) {
                        pw.print(newIndentString);
                        pw.printf("\"%s\": ", entry.getKey());
                        entry.getValue().print(pw, newIndentString);
                        pw.println(",");
                    }
                    Map.Entry<String, JsonSupport.JsonValue> lastEntry = entries.getLast();
                    pw.print(newIndentString);
                    pw.printf("\"%s\": ", lastEntry.getKey());
                    lastEntry.getValue().print(pw, newIndentString);
                    pw.println();
                }

                pw.print(indentString);
                pw.print("}");
            }

            @Override
            public String toString() {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);

                print(pw, "");
                return sw.toString();
            }

            public static JsonSupport.JsonObject from(Map<String, JsonSupport.JsonValue> fields) {
                return new JsonSupport.JsonObject(Map.copyOf(fields));
            }
        }

        public record JsonArray(
                List<JsonSupport.JsonValue> elements) implements JsonSupport.JsonStructure {

            public JsonArray {
                elements = List.copyOf(elements);
            }

            @Override
            public JsonSupport.JsonValueType getValueType() {
                return JsonSupport.JsonValueType.ARRAY;
            }

            @Override
            public void print(PrintWriter pw, String indentString) {
                pw.println("[");

                String newIndentString = indentString + "    ";

                if (elements.isEmpty()) {
                    pw.println();
                } else {
                    for (JsonSupport.JsonValue element : elements.subList(0, elements.size() - 1)) {
                        pw.print(newIndentString);
                        element.print(pw, newIndentString);
                        pw.println(",");
                    }
                    JsonSupport.JsonValue lastElement = elements.getLast();
                    pw.print(newIndentString);
                    lastElement.print(pw, newIndentString);
                    pw.println();
                }

                pw.print(indentString);
                pw.print("]");
            }

            @Override
            public String toString() {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);

                print(pw, "");
                return sw.toString();
            }

            public static JsonSupport.JsonArray from(List<JsonSupport.JsonValue> elements) {
                return new JsonSupport.JsonArray(List.copyOf(elements));
            }
        }

        public interface JsonAtomicValue extends JsonSupport.JsonValue {
        }

        public record JsonNumber(BigDecimal value) implements JsonSupport.JsonAtomicValue {

            public JsonNumber {
                Objects.requireNonNull(value);
            }

            @Override
            public JsonSupport.JsonValueType getValueType() {
                return JsonSupport.JsonValueType.NUMBER;
            }

            @Override
            public void print(PrintWriter pw, String indentString) {
                pw.print(this);
            }

            @Override
            public String toString() {
                return String.format("%s", value().toString());
            }

            public static JsonSupport.JsonNumber from(int number) {
                return new JsonSupport.JsonNumber(new BigDecimal(number));
            }
        }

        public record JsonBoolean(boolean value) implements JsonSupport.JsonAtomicValue {

            @Override
            public JsonSupport.JsonValueType getValueType() {
                return JsonSupport.JsonValueType.BOOLEAN;
            }

            @Override
            public void print(PrintWriter pw, String indentString) {
                pw.print(this);
            }

            @Override
            public String toString() {
                return String.valueOf(value());
            }
        }

        public record JsonString(String value) implements JsonSupport.JsonAtomicValue {

            public JsonString {
                Objects.requireNonNull(value);
            }

            @Override
            public JsonSupport.JsonValueType getValueType() {
                return JsonSupport.JsonValueType.STRING;
            }

            @Override
            public void print(PrintWriter pw, String indentString) {
                pw.print(this);
            }

            @Override
            public String toString() {
                return String.format("""
                                "%s"\s""".stripTrailing(),
                        escapeDoubleQuotes(value())
                );
            }
        }

        public enum JsonNull implements JsonSupport.JsonValue {
            INSTANCE;

            @Override
            public JsonSupport.JsonValueType getValueType() {
                return JsonSupport.JsonValueType.NULL;
            }

            @Override
            public void print(PrintWriter pw, String indentString) {
                pw.print(this);
            }

            @Override
            public String toString() {
                return "null";
            }
        }

        // See https://docs.ycrash.io/ycrash-features/ycrash-faq/escaping-special-characters.html

        private static String escapeDoubleQuotes(String s) {
            return s.replace("\"", "\\\"");
        }
    }
}
