#!/usr/bin/env -S java --source 21

/*
 * Copyright 2025-2025 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Java program and shell script showing which arguments have been passed to it.
 * This program therefore shows the list of passed parameters after globbing has been applied.
 * <p>
 * See <a href="https://blog.robertelder.org/find-command-wildcard-globbing/">find command and wildcard globbing</a>
 * for a good example of how globbing works, and to what surprises it can lead.
 *
 * @author Chris de Vreeze
 */
public final class ShowPassedArguments implements Runnable {

    public static void main(String... args) {
        ShowPassedArguments runnable = new ShowPassedArguments(args);
        runnable.run();
    }

    private final List<String> args;

    public ShowPassedArguments(String[] args) {
        this.args = Arrays.stream(args).toList();
    }

    @Override
    public void run() {
        Objects.requireNonNull(args); // Dummy statement to please the compiler

        if (Runtime.version().feature() < 21) {
            throw new IllegalStateException("Java version >= 21 required");
        }

        System.out.printf("Argument 0 (referring to this program %s itself) is not shown%n", ShowPassedArguments.class.getSimpleName());
        for (int i = 0; i < args.size(); i++) {
            System.out.printf("Argument %d (enclosed in brackets): [%s]%n", i + 1, args.get(i));
        }
    }
}
