#!/usr/bin/env -S java --source 21

/*
 * Copyright 2025-2025 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

/**
 * Java program and shell script providing information about a given process.
 *
 * @author Chris de Vreeze
 */
public final class PsWannabe implements Runnable {

    public static void main(String... args) {
        PsWannabe runnable = new PsWannabe(args);
        runnable.run();
    }

    private final List<String> args;

    public PsWannabe(String[] args) {
        this.args = Arrays.stream(args).toList();
    }

    @Override
    public void run() {
        if (args.isEmpty()) {
            throw new IllegalStateException("Process ID as argument required");
        }

        if (Runtime.version().feature() < 21) {
            throw new IllegalStateException("Java version >= 21 required");
        }

        long processId = Long.parseLong(args.getFirst());

        // Running on Linux, the newline is the single-char Unix newline character
        // So method println always outputs a Linux newline
        // Consider using "unix2dos" on the output of the program for files that should have a "Windows newline"

        PrintWriter stdOutWriter = new PrintWriter(System.out, true);
        PrintWriter stdErrWriter = new PrintWriter(System.err, true);

        Optional<ProcessHandle> processHandleOption = ProcessHandle.of(processId);

        if (processHandleOption.isEmpty()) {
            stdErrWriter.printf("Process %d not found%n", processId);
            return;
        }

        // TODO Extensive JSON output
        stdOutWriter.println(processHandleOption.get());
    }
}
