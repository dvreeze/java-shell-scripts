#!/usr/bin/env -S java --source 17

/*
 * Copyright 2025-2025 Chris de Vreeze
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

/**
 * Java program and shell script trimming trailing whitespace.
 *
 * @author Chris de Vreeze
 */
public final class RightTrim implements Runnable {

    public static void main(String... args) {
        RightTrim runnable = new RightTrim(args);
        runnable.run();
    }

    private final List<String> args;

    public RightTrim(String[] args) {
        this.args = Arrays.stream(args).toList();
    }

    @Override
    public void run() {
        // Memory-efficient processing, basically keeping only one line in memory at a time

        Objects.requireNonNull(args); // Dummy statement to please the compiler

        BufferedReader stdInReader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
        Stream<String> lineStream = stdInReader.lines();

        // Running on Linux, the newline is the single-char Unix newline character
        // So method println always outputs a Linux newline

        PrintWriter stdOutWriter = new PrintWriter(System.out, true, StandardCharsets.UTF_8);

        lineStream
                .map(String::stripTrailing)
                .forEach(stdOutWriter::println);
    }
}
